import { GoogleGenAI } from '@google/genai';

// JSON Schema types for better type safety
interface JsonSchemaProperty {
    type: 'string' | 'number' | 'boolean' | 'array' | 'object';
    items?: JsonSchemaProperty;
    properties?: Record<string, JsonSchemaProperty>;
    required?: string[];
    minItems?: number;
    maxItems?: number;
}

interface JsonSchema {
    type: 'array' | 'object';
    items?: JsonSchemaProperty;
    properties?: Record<string, JsonSchemaProperty>;
    required?: string[];
    minItems?: number;
    maxItems?: number;
}

interface CallAgentWithSystemParams {
    apiKey: string;
    agentName: string;
    systemInstruction?: string;
    prompt: string;
    maxTokens?: number;
    temperature?: number;
    topP?: number;
    topK?: number;
}

interface CallAgentWithJsonParams<T> {
    apiKey: string;
    agentName: string;
    systemInstruction?: string;
    prompt: string;
    responseSchema: JsonSchema;
    maxTokens?: number;
    temperature?: number;
    topP?: number;
    topK?: number;
}

const MODEL = 'gemini-2.5-flash';

export async function callAgentWithSystem({ apiKey, agentName, systemInstruction, prompt, maxTokens = 50000, temperature = 1.0, topP = 0.9, topK = 16 }: CallAgentWithSystemParams): Promise<string> {
  
  try {

    if (!apiKey) {
      throw new Error('GOOGLE_GENERATIVE_AI_API_KEY not found in environment variables');
    }

    const client = new GoogleGenAI({ apiKey });
    
    const response = await client.models.generateContent({
      model: MODEL,
      contents: prompt,
      config: {
        systemInstruction:`Think step by step before answering. Use up to 24576 tokens for thinking. ${systemInstruction}`,
        temperature,
        maxOutputTokens: maxTokens,
        topP,
        topK,
        thinkingConfig: {
          thinkingBudget: 24576,
        },
      },
    });

    const text = response.text;
    
    if (!text) {
      throw new Error(`No text generated by ${agentName}`);
    }

    return text;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    throw new Error(`Gemini API call failed for ${agentName}: ${errorMessage}`);
  }
}

/**
 * Call Gemini API with structured JSON output
 * @returns Parsed JSON response of type T
 */
export async function callAgentWithJson<T>({ 
  apiKey, 
  agentName, 
  systemInstruction, 
  prompt, 
  responseSchema,
  maxTokens = 50000,
  temperature = 1.0,
  topP = 0.9,
  topK = 16 
}: CallAgentWithJsonParams<T>): Promise<T> {
  
  try {

    if (!apiKey) {
      throw new Error('GOOGLE_GENERATIVE_AI_API_KEY not found in environment variables');
    }

    const client = new GoogleGenAI({ apiKey });
    
    const response = await client.models.generateContent({
      model: MODEL,
      contents: prompt,
      config: {
        systemInstruction: systemInstruction || "Think step by step before answering. Use up to 20000 tokens for thinking.",
        temperature,
        maxOutputTokens: maxTokens,
        topP,
        topK,
        responseMimeType: 'application/json',
        responseSchema,
        thinkingConfig: {
          thinkingBudget: 24576,
        },
      },
    });

    const text = response.text;
    
    if (!text) {
      throw new Error(`No text generated by ${agentName}`);
    }

    // Parse the JSON response
    let parsedResponse: T;
    try {
      parsedResponse = JSON.parse(text.trim());
    } catch (parseError) {
      throw new Error(`Failed to parse JSON response from ${agentName}: ${parseError instanceof Error ? parseError.message : 'Unknown parse error'}`);
    }

    return parsedResponse;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    throw new Error(`Gemini API call failed for ${agentName}: ${errorMessage}`);
  }
}

// Export types and client
export type { JsonSchema, JsonSchemaProperty };
export const geminiClient = { callAgentWithSystem, callAgentWithJson };